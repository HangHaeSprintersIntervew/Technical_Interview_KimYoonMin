
# Day1

1. 객체지향이란 무엇인가요?
객체지향 프로그래밍이란 "캡슐화, 다형성, 상속"을 이용하여 "코드 재사용을 증가시키고, 유지보수를 감소시키는 장점"을 얻기 위해 "객체"들을 연결시켜 프로그래밍하는 것


2. 객체지향 프로그래밍의 장점을 설명해주세요
- 소프트웨어의 생산성 향상
객체지향 프로그래밍은 다형성, 객체, 캡슐화 등 소프트웨어의 재사용을 지향한다. 이미 만들어진 클래스를 상속받거나 객체를 가져다 재사용하거나, 부분 수정을 통해, 소프트웨어를 작성하는 부담을 대폭 줄일 수 있다.

- 실세계에 대한 모델링을 좀 더 쉽게 해준다. (모든 것을 객체들의 상호작용으로 생각)

- 보안성이 높다 (캡슐화, 데이터 은닉, 다형성으로 인해 필요한 정보를 재정의하거나 getter, setter를 이용하기 때문에 보안성이 높다.)


3. 객체 지향적 설계 원칙이란?
- SRP(Single Responsibility Principle): 단일 책임 원칙
  모든 클래스는 각각 하나의 책임만 가져야 한다. 클래스는 그 책임을 완전히 캡슐화해야 함을 말한다.
  ex) 사칙연산 함수를 가지고 있는 계산 클래스가 있다고 치자. 이 상태의 계산 클래스는 오직 사칙연산 기능만을 책임진다. 이 클래스를 수정한다고 한다면 그 이유는 사직연산 함수와 관련된 문제일 뿐이다.
  
- OCP(Open Closed Priciple): 개방 폐쇄 원칙
확장에는 열려있고 수정에는 닫혀있는. 기존의 코드를 변경하지 않으면서( Closed), 기능을 추가할 수 있도록(Open) 설계가 되어야 한다는 원칙을 말한다.
ex) 캐릭터를 하나 생성한다고 할때, 각각의 캐릭터가 움직임이 다를 경우 움직임의 패턴 구현을 하위 클래스에 맡긴다면 캐릭터 클래스의 수정은 필요가 없고(Closed) 움직임의 패턴만 재정의 하면 된다.(Open)

- LSP(Listov Substitution Priciple): 리스코프 치환 원칙
자식 클래스는 언제나 자신의 부모 클래스를 대체할 수 있다는 원칙이다. 즉 부모 클래스가 들어갈 자리에 자식 클래스를 넣어도 계획대로 잘 작동해야 한다.
자식클래스는 부모 클래스의 책임을 무시하거나 재정의하지 않고 확장만 수행하도록 해야 LSP를 만족한다.

- ISP(Interface Segregation Principle): 인터페이스 분리 원칙
한 클래스는 자신이 사용하지않는 인터페이스는 구현하지 말아야 한다. 하나의 일반적인 인터페이스보다 여러개의 구체적인 인터페이스가 낫다.


- DIP(Dependency Inversion Principle): 의존 역전 원칙
의존 관계를 맺을 때 변화하기 쉬운 것 또는 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 것이다. 
한마디로 구체적인 클래스보다 인터페이스나 추상 클래스와 관계를 맺으라는 것이다.



4. 객체지향 프로그래밍 키워드 설명해주세요(추상화 캡슐화 상속 다형성 등)
- 추상화 : 목적과 관련이 없는 부분을 제거하여 필요한 부분만을 표현하기 위한 것을 의미한다. 공통의 속성이나 기능을 묶어 이름을 붙이는 것.
- 캡슐화 : 연관된 상태와 행위를 결정하는 기능을 묶어 주는 것을 의미. 이렇게 묶어주면 기능을 클래스 밖에서 접근 가능한 대상을 제한하는 정보 은닉이 가능함.
- 상속 : 상위 클래스의 속성과 기능을 그대로 이어받아 사용 할수 있게 하고, 기능의 일부분을 변경해야 할 경우 상속받은 하위클래스에서 해당 기능만 다시 수정하여 사용할 수 있게 하는 것이다.
- 다형성 : 부모 클래스에서 파생된 자식 클래스들의 기능이 각기 다를 수 있다는 특징을 의미함

5. 어떤 코드가 클린 코드라고 생각하시나요?
  재사용성이 좋고, 가독성이 좋으며, 수정과 확장이 용이한 코드를 말한다.

6. RESTful하다는 게 무엇이며 아는대로 설명해보세요
  각 구성요소들의 역할이 완벽하게 분리되어 있는 것을 말한다.
  URI는 각 리소스(자원)를 명확하게 인식할 수 있도록 용이한 표현방식을 가져야 하며, 각 리소스에 대한 행위(메소드)를 HTTP 메소드를 이용하여 Uniform(일관성)하게 정의할 수 있어야 한다.
